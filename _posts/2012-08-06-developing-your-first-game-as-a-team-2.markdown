---
layout: post
title:  "Developing your first game as a team (2/2)"
date:   2012-08-06
categories: game-development life wordpress
---

_Finding and managing an indie team isn't easy. That's something we learned last week. Before I continue with the second part, I first have to complement the part of last week. Searching team members should be done wisely. A common mistake is to ask friends or even just acquaintances to join your team. This has the advantage that you already have a good relationship with this team member. It's someone well-known to you. Don't get me wrong, if possible you should hire these friends or acquaintances. But please, ask yourself always a few questions. Can I trust this person? Has he/she the right attitude and motivation? Is he/she really as good as he/she claims? And last but not least, can that person handle the job he/she is supposed to do? As long as you keep these simple questions in mind, you'll be fine._

Having troubles finding people to join your team? If this is the case you shouldn't forget that you live in [a free, open and global world]({{ site.url }}/2012/08/04/grey-technology/). In a world with more than 6 billion people there are more than enough people to join your team. However, the chance that they live near you is rather small. Therefore, you should use the world wide web to find them. It is often even better to work together with people from other countries than with friends. These people have another culture and their vision is probably not the same as yours. This cultural mix gives teams really the chance to create innovative concepts. So with this solution and its many advantages you haven't an excuse left for not finding a team. There are a lot of great websites that helps to connect game developers. Among them are [GameDev](http://www.gamedev.net/) and [Poly Count](http://www.polycount.com/). And hey, remember one of my main rules? [Google](http://www.google.com/) is your friend. If creating a game is too much for you, there is something else you could do. On the web there are tons of open source projects available. There are enough projects who need your help. Checking [Source Forge](http://www.sourceforge.net/) is therefore also a valuable option. Now then, let's start with the development the game.

When reading this you should already have a team. Also you should already know what kind of game you develop. These are just general drafty things, nothing too specific yet. If you are confused by what I mean with this, then I suggest that you read the first part of this series. The duration of a game development process can take a few weeks up to months. Your mechanics, storylines and gameplay elements will **change a lot** in this time. To save you and your team time it is important that you have a [Game Design Document](http://en.wikipedia.org/wiki/Game_design_document). This gives your game some structure and defines the core elements. Also it paraphrases your concept and what you want to achieve with the game. This can either be a small or a big document. This depends mainly on the following choice:

1. Going for a big game design document means that you and your team solely depend on this file. You will constantly update it. The file will grow linearly with the progress of your game.

2. Some teams go for a Log system, which means that the GDD is only there to define the concept and core mechanics of your game. The Log system is to be used as a diary. Here you and your team members should write what you're doing at the time of writing, what you're planning to do and the problems you encountered. To-do lists could serve as a completion.

Whether you go for a real-time solution or a central file, depends solely on your team preferences. In the end, this is just a method. The method should be in function of you, your team and your game. So don't invest too much time in this. There are enough options available to manage files via the internet. For documents the best option is [Google Docs](https://docs.google.com/), which is now part of [Google Drive](https://drive.google.com/) (similar to [Dropbox](http://www.dropbox.com/)). Via GD you can create, manage and share casual document files such as a text file, a spreadsheet or even a presentation document. On top of that you can also import existing documents and convert them to the google doc format. It's free and it works fast and clean. General files such as images, packages or other exotic file formats can be shared via Google Drive or Dropbox. Both services have also a free application which you can download and install. This app enables you to simply drag and drop files in the correct folders. It will sync automatically. Yes, we truly live in exciting times.

In general, each team member can update these files and upload new ones regularly. However, sometimes it is necessary to **meet each other**. This can be done either virtually or in real life. In my experience, it makes no big difference how you meet. For a lot of teams it is inconvenient or even impossible to meet each other physically. In that case you should just use a free [VOIP](http://en.wikipedia.org/wiki/Voice_over_IP) client such as [Skype](http://www.skype.com/intl/en/get-skype/) and [Google Hangout](https://www.google.com/+/learnmore/hangouts/). There are a lot of other options available on the internet. The reason for these meetings is to talk about the general progress, milestones or important undefined elements. As a leader you should prepare these meetings. It saves a lot of time if you already know the topics and if you have some kind of draft version of a time schedule. This gives the meeting some guidance and improves the output. Don't waste time by talking to much about the same subject. Don't forget why you scheduled this meeting in the first place. Talking about scheduling meetings, I should probably tell you the following. To schedule a meeting on a date which fits the best for everyone from your team you should use a free tool such as [Doodle](http://www.doodle.com/). Every one of your team should be at these meetings, so it's important that everyone is happy about the scheduled date.

Creating a good game is all about **selecting and discarding ideas**. Everyone has probably thousands of ideas, some better than others. If you haven't the guts to cut ideas out of the project, you won't be able to create a game. Just try to have a few core mechanics, nothing more, nothing less. These are the mechanics that really define your game. Why should people play your game, what's so special about it? Don't forget about your concept. It is true, in some games that's more important than in others. Still, even in small games it can make the difference. Selecting idea's is one of the toughest things to do. It will really test you as a team. Things can get heated when someone in your team really wants a feature of his in the game, while others don't. As a leader you have to solve these situations, and as a team you will have to come to a solution. Try to remember this, the more complex your game gets, the bigger the chance gets that your project will fail.

If you create a 2D game you could create your own **engine**. The language, API and frameworks you use for this will depend on your target audience. Are you planning to create the game for Windows, Macintosh, Linux or for all of them? Or maybe you are creating a mobile or browser game? However, if you are creating a 3D game you should consider other options. 3D engines are way more complex than 2D engines. Creating such an engine will take a lot of your time. So the question is, do I really want to spend most of my time creating an engine? The solution for this is simple. Rather than trying to create one, just use an existing one. Viable options are the [Unreal Engine (UDK)](http://www.unrealengine.com/udk/), [Unity3D](http://unity3d.com/) and [many others](http://en.wikipedia.org/wiki/List_of_game_engines). Before choosing one you should really do some research. What engines are available? Which fit best our project and the skills of the team? What are the pro's and con's of the engines? It's really important that you know the tool you're planning to use. Choosing the wrong engine can be the end of your project. Think about that for a while.

The chance that the programmer(s), level designer(s) and 3D designer(s) are working on one, single computer is rather small. To **manage your team project** and to be able to work on it with multiple people you should use an [SVN](http://nl.wikipedia.org/wiki/Subversion) client. Via this you can share all your project files with each other. It also enables you to go back to an older version of one of your project files. You never know when things get wrong. You can never be too safe enough, can you? There are a lot of free SVN clients available on the internet, so do some research. I used [TortoiseSVN](http://tortoisesvn.tigris.org/) for windows, which works like a shell on top of windows explorer. It's a great tool, but it will take some of your time to learn how the tool works and what all of the options are. Besides an SVN client you also need a server. On this server all your project files will be saved. It will be the beating heart of your project so choose wisely. A good and free one is Google Code. You'll have 2 GB free space per project and the upload/download speed is decent. Keep in mind that you can only use Google Code for open source projects. For commercial projects you should consider Assembla. There are tons of other options available via the internet. Don't be shy to explore for yourself.

**Edit (2014/08):** If you're looking for a good revisionning system, [Git](https://www.google.co.uk/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0CCIQFjAA&url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FGit_(software)&ei=XJzqU7X8HsPF7AbSloGoAQ&usg=AFQjCNF-3SEMy2Sve5Ptar_OR-42U87AdA&bvm=bv.72938740,d.ZGU) is the system you should research. There are enough free hosting git services, with [GitHub](http://github.com) being my favorite. Feel free to use Google to discover and use other ones. Git is easier to use than SVN and it is way better/different.

**Deadlines** will make the difference, you can't aim for results without them. Try to develop a prototype as fast as possible. It's a nice opportunity to test your gameplay elements and core mechanics. Go for something small, including only the core elements. This helps to motivate you and your team. Interactive stuff always does, trust me. Fine-tune this prototype as much as possible. It also gives the 3D artist and level designers the chance to test their combined work. If everything is coming nicely together, well then you and your team are doing an excellent job. Learn to appreciate these testing moments, they will be your fuel for the next couple of months. But don't get demotivated when things go wrong, cause they will. When your small prototype is ‘finished' you should try to complete a full level, or a chapter if you will. Just try to create a small part of your game. In general you should build your game piece by piece, rather than doing everything at once. That last method never works.

Like I said last week, this isn't a guide at all. It's only some advice. It sure felt nice talking about this. I hope this series will help you with your future indie games. And please, do not hesitate to discuss this subject via the comment section below. I'm always thrilled to hear your thoughts. If you are creating a game right now, then please let me know.

Good Luck and Have Fun!