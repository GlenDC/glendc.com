---
layout: post
title:  "Debug shaders on Run time"
date:   2013-05-26
categories: graphics inspiration shader wordpress
---

_I learned to develop [shaders](http://en.wikipedia.org/wiki/Shader) in [FX Composer](https://developer.nvidia.com/fx-composer), developed by NVIDIA. It's very neat as it allows you to compile your shaders so that you can create a working shader without any surprises. It gives support for DirectX9, DirectX10 and OpenGL. Since than I learned a lot. I also started developing shaders in a wide range of different frameworks. During one of my newest projects, a game written in [XNA](http://www.microsoft.com/en-us/download/details.aspx?id=20914), I've encountered some shader difficulties. The problem was that I couldn't test it in FX Composer as it needed a lot of stuff that I could only give via the game._

Here is where this article is about. How to debug your shader, while using it in a DirectX game. **PIX** is an application that allows you to do that, and once you learned to use it, you will love it. If you're creating a DirectX game, chances are big that the application is already installed on your PC. It comes by default with the DirectX SDK, the latest(june) for DirectX10 can be downloaded [here](http://www.microsoft.com/en-us/download/details.aspx?id=6812). In case you're still using DirectX 9 you can also just download the latest version for that [here](http://directx-sdk.soft32.com/).

If you open the application for the first time, it's pretty scary. It looks very basic. You are probably used to abstract interfaces like this, if you already used tools like a [Profiler](http://en.wikipedia.org/wiki/Profiling_(computer_programming)). The program is easy to learn and my goal of this article is not to give a complete and detailed overview of all the possibilities. However, I'm more than happy to give you something to start with and for that I'm going to just give a quick introduction to it, by using an XNA game I'm working on.

To start using the application we just have to start a new experiment by going to **File** => **New Experiment** or by pressing _Ctrl + N_ on your keyboard. This will open a window with several basic options. The most important is the _Program Path Text Field_, where you have to fill in the full path to the executable of the program you would like to debug. You can also just browse to the _EXE_, by pressing the "..." button. The radial check boxes define how you will gather your information. I always choose "_A single-frame capture of Direct3D whenever F12 is pressed_" together with the "Enable draw timing" checked. This will allow you to press the F12 key to save that frame for debugging later. Now you can either **start the experiment** to start the debugging of your game or you can press **More Options** to define more advanced options. In case you use _XNA_, you'll have to define something extra first.

In the more advanced options window, you'll find the "_disable D3DX analysis_" check box under the Target program tab. For games developed with **XNA** you'll have to **check this**. Otherwise you wont be able to debug your Shader. For more information regarding all the extra options and also a more detailed explanation about PIX I would like to refer you to [this Microsoft Blog article](http://blogs.msdn.com/b/manders/archive/2006/12/15/a-painless-introduction-to-pix-for-windows.aspx). Now you're ready to debug your shader by pressing **the Start Experiment button**.

When you have selected the frame(s) you would like to debug, by pressing **F12**, you can just exit your game. Now **PIX** will show your his power. It will open your selected frames, with all the debug information for each draw call of each selected frame. All the options may be a little overwhelming the first time, so take your time to get used to the application. As your the programmer of your game you should know if the part you want to debug get's drawn first, or more to the end. This will allow you to go to the draw call you want very fast. For a detailed draw call search I found that searching with the **Mesh tab** in the Details window open was the fastest. As you see the wire frame of your objects, but without having to endure the long draw process you get in the **Renderer tab**. Once you found your draw call you can then go to the **Renderer tab** to debug the pixel you want. Here you can choose the pixel or vertex Shader you want. In this debug Shader process you can than see what goes wrong by checking your parameters. Even if the parameters don't show up you can still find them via the _Disassembly_ tab as the debugger does a nice commenting job with a reference to the correct register.

You can search on [Google](http://google.com/) for more information, if you still need it. The program is very intuitive and if you know what you're doing, you'll have no trouble learning this programming by just using it. I hope you'll have as much pleasure with the program as I have. Happy Debugging!